// Code generated by goyacc - DO NOT EDIT.

package sql1

import __yyfmt__ "fmt"

import (
	"time"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).query.Statements = append(yylex.(*Tokenizer).query.Statements, stmt)
}

type yySymType struct {
	yys     int
	stmt    Statement
	stmts   Statements
	selStmt *SelectStatement
	sdbStmt *ShowDatabasesStatement
	cdbStmt *CreateDatabaseStatement
	smmStmt *ShowMeasurementsStatement
	str     string
	query   Query
	field   *Field
	fields  Fields
	sources Sources
	sortfs  SortFields
	sortf   *SortField
	ment    *Measurement
	dimens  Dimensions
	dimen   *Dimension
	int     int
	int64   int64
	float64 float64
	expr    Expr
	tdur    time.Duration
	bool    bool
}
type yyXError struct {
	state, xsym int
}

const (
	yyDefault    = 57377
	yyEofCode    = 57344
	AND          = 57375
	AS           = 57349
	ASC          = 57373
	BY           = 57351
	COMMA        = 57359
	CREATE       = 57355
	DATABASE     = 57357
	DATABASES    = 57356
	DESC         = 57372
	DURATIONVAL  = 57370
	EQ           = 57362
	FROM         = 57347
	GROUP        = 57350
	GT           = 57366
	GTE          = 57367
	IDENT        = 57368
	INTEGER      = 57369
	LIMIT        = 57353
	LT           = 57364
	LTE          = 57365
	MEASUREMENTS = 57358
	MUL          = 57361
	NEQ          = 57363
	NUMBER       = 57374
	OR           = 57376
	ORDER        = 57352
	SELECT       = 57346
	SEMICOLON    = 57360
	SHOW         = 57354
	STRING       = 57371
	WHERE        = 57348
	yyErrCode    = 57345

	yyMaxDepth = 200
	yyTabOfs   = -53
)

var (
	yyPrec = map[int]int{
		AND: 0,
		OR:  0,
	}

	yyXLAT = map[int]int{
		57344: 0,  // $end (50x)
		57360: 1,  // SEMICOLON (47x)
		57353: 2,  // LIMIT (37x)
		57352: 3,  // ORDER (29x)
		57368: 4,  // IDENT (20x)
		57348: 5,  // WHERE (17x)
		57359: 6,  // COMMA (12x)
		57350: 7,  // GROUP (11x)
		57369: 8,  // INTEGER (11x)
		57375: 9,  // AND (10x)
		57370: 10, // DURATIONVAL (10x)
		57374: 11, // NUMBER (10x)
		57376: 12, // OR (10x)
		57371: 13, // STRING (10x)
		57362: 14, // EQ (6x)
		57347: 15, // FROM (6x)
		57366: 16, // GT (6x)
		57367: 17, // GTE (6x)
		57364: 18, // LT (6x)
		57365: 19, // LTE (6x)
		57363: 20, // NEQ (6x)
		57382: 21, // CONDITION_VAR (4x)
		57381: 22, // CONDITION (3x)
		57390: 23, // OPERATION_EQUAL (3x)
		57378: 24, // ALL_QUERIES (2x)
		57351: 25, // BY (2x)
		57379: 26, // COLUMN_NAME (2x)
		57380: 27, // COLUMN_NAMES (2x)
		57355: 28, // CREATE (2x)
		57383: 29, // CREATE_DATABASE_STATEMENT (2x)
		57384: 30, // DIMENSION_NAME (2x)
		57385: 31, // DIMENSION_NAMES (2x)
		57388: 32, // LIMIT_INT (2x)
		57361: 33, // MUL (2x)
		57391: 34, // ORDER_CLAUSES (2x)
		57346: 35, // SELECT (2x)
		57392: 36, // SELECT_STATEMENT (2x)
		57354: 37, // SHOW (2x)
		57393: 38, // SHOW_DATABASES_STATEMENT (2x)
		57394: 39, // SHOW_MEASUREMENTS_STATEMENT (2x)
		57395: 40, // SORTFIELD (2x)
		57396: 41, // SORTFIELDS (2x)
		57397: 42, // STATEMENT (2x)
		57398: 43, // TABLE_NAME (2x)
		57399: 44, // TABLE_NAMES (2x)
		57400: 45, // WHERE_CLAUSE (2x)
		57349: 46, // AS (1x)
		57373: 47, // ASC (1x)
		57357: 48, // DATABASE (1x)
		57356: 49, // DATABASES (1x)
		57372: 50, // DESC (1x)
		57386: 51, // FROM_CLAUSE (1x)
		57387: 52, // GROUP_BY_CLAUSE (1x)
		57358: 53, // MEASUREMENTS (1x)
		57389: 54, // OPER (1x)
		57377: 55, // $default (0x)
		57345: 56, // error (0x)
	}

	yySymNames = []string{
		"$end",
		"SEMICOLON",
		"LIMIT",
		"ORDER",
		"IDENT",
		"WHERE",
		"COMMA",
		"GROUP",
		"INTEGER",
		"AND",
		"DURATIONVAL",
		"NUMBER",
		"OR",
		"STRING",
		"EQ",
		"FROM",
		"GT",
		"GTE",
		"LT",
		"LTE",
		"NEQ",
		"CONDITION_VAR",
		"CONDITION",
		"OPERATION_EQUAL",
		"ALL_QUERIES",
		"BY",
		"COLUMN_NAME",
		"COLUMN_NAMES",
		"CREATE",
		"CREATE_DATABASE_STATEMENT",
		"DIMENSION_NAME",
		"DIMENSION_NAMES",
		"LIMIT_INT",
		"MUL",
		"ORDER_CLAUSES",
		"SELECT",
		"SELECT_STATEMENT",
		"SHOW",
		"SHOW_DATABASES_STATEMENT",
		"SHOW_MEASUREMENTS_STATEMENT",
		"SORTFIELD",
		"SORTFIELDS",
		"STATEMENT",
		"TABLE_NAME",
		"TABLE_NAMES",
		"WHERE_CLAUSE",
		"AS",
		"ASC",
		"DATABASE",
		"DATABASES",
		"DESC",
		"FROM_CLAUSE",
		"GROUP_BY_CLAUSE",
		"MEASUREMENTS",
		"OPER",
		"$default",
		"error",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {24, 1},
		2:  {24, 2},
		3:  {24, 3},
		4:  {42, 1},
		5:  {42, 1},
		6:  {42, 1},
		7:  {42, 1},
		8:  {36, 7},
		9:  {27, 1},
		10: {27, 3},
		11: {26, 1},
		12: {26, 1},
		13: {26, 3},
		14: {51, 2},
		15: {51, 0},
		16: {44, 1},
		17: {44, 3},
		18: {43, 1},
		19: {52, 3},
		20: {52, 0},
		21: {31, 1},
		22: {31, 3},
		23: {30, 1},
		24: {45, 2},
		25: {45, 0},
		26: {22, 1},
		27: {22, 3},
		28: {22, 3},
		29: {23, 3},
		30: {54, 1},
		31: {54, 1},
		32: {54, 1},
		33: {54, 1},
		34: {54, 1},
		35: {54, 1},
		36: {21, 1},
		37: {21, 1},
		38: {21, 1},
		39: {21, 1},
		40: {21, 1},
		41: {34, 3},
		42: {34, 0},
		43: {41, 1},
		44: {41, 3},
		45: {40, 1},
		46: {40, 2},
		47: {40, 2},
		48: {32, 2},
		49: {32, 0},
		50: {38, 2},
		51: {29, 3},
		52: {39, 5},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [77][]uint16{
		// 0
		{24: 54, 28: 62, 58, 35: 60, 56, 61, 57, 59, 42: 55},
		{53},
		{52, 128},
		{49, 49},
		{48, 48},
		// 5
		{47, 47},
		{46, 46},
		{4: 105, 26: 103, 102, 33: 104},
		{49: 65, 53: 66},
		{48: 63},
		// 10
		{4: 64},
		{2, 2},
		{3, 3},
		{28, 28, 28, 28, 5: 67, 45: 68},
		{4: 85, 8: 87, 10: 88, 86, 13: 89, 21: 84, 82, 83},
		// 15
		{11, 11, 11, 69, 34: 70},
		{25: 74},
		{4, 4, 71, 32: 72},
		{8: 73},
		{1, 1},
		// 20
		{5, 5},
		{4: 77, 40: 76, 75},
		{12, 12, 12},
		{10, 10, 10, 6: 80},
		{8, 8, 8, 6: 8, 47: 79, 50: 78},
		// 25
		{7, 7, 7, 6: 7},
		{6, 6, 6, 6: 6},
		{4: 77, 40: 76, 81},
		{9, 9, 9},
		{29, 29, 29, 29, 9: 98, 12: 99},
		// 30
		{27, 27, 27, 27, 9: 27, 12: 27},
		{14: 91, 16: 95, 96, 93, 94, 92, 54: 90},
		{17, 17, 17, 17, 9: 17, 12: 17, 14: 17, 16: 17, 17, 17, 17, 17},
		{16, 16, 16, 16, 9: 16, 12: 16, 14: 16, 16: 16, 16, 16, 16, 16},
		{15, 15, 15, 15, 9: 15, 12: 15, 14: 15, 16: 15, 15, 15, 15, 15},
		// 35
		{14, 14, 14, 14, 9: 14, 12: 14, 14: 14, 16: 14, 14, 14, 14, 14},
		{13, 13, 13, 13, 9: 13, 12: 13, 14: 13, 16: 13, 13, 13, 13, 13},
		{4: 85, 8: 87, 10: 88, 86, 13: 89, 21: 97},
		{4: 23, 8: 23, 10: 23, 23, 13: 23},
		{4: 22, 8: 22, 10: 22, 22, 13: 22},
		// 40
		{4: 21, 8: 21, 10: 21, 21, 13: 21},
		{4: 20, 8: 20, 10: 20, 20, 13: 20},
		{4: 19, 8: 19, 10: 19, 19, 13: 19},
		{4: 18, 8: 18, 10: 18, 18, 13: 18},
		{24, 24, 24, 24, 9: 24, 12: 24},
		// 45
		{4: 85, 8: 87, 10: 88, 86, 13: 89, 21: 84, 101, 83},
		{4: 85, 8: 87, 10: 88, 86, 13: 89, 21: 84, 100, 83},
		{25, 25, 25, 25, 9: 25, 12: 25},
		{26, 26, 26, 26, 9: 26, 12: 26},
		{38, 38, 38, 38, 5: 38, 7: 38, 15: 111, 51: 110},
		// 50
		{44, 44, 44, 44, 5: 44, 108, 44, 15: 44},
		{42, 42, 42, 42, 5: 42, 42, 42, 15: 42},
		{41, 41, 41, 41, 5: 41, 41, 41, 15: 41, 46: 106},
		{4: 107},
		{40, 40, 40, 40, 5: 40, 40, 40, 15: 40},
		// 55
		{4: 105, 26: 103, 109, 33: 104},
		{43, 43, 43, 43, 5: 43, 7: 43, 15: 43},
		{33, 33, 33, 33, 5: 33, 7: 118, 52: 117},
		{4: 114, 43: 113, 112},
		{39, 39, 39, 39, 5: 39, 7: 39},
		// 60
		{37, 37, 37, 37, 5: 37, 115, 37},
		{35, 35, 35, 35, 5: 35, 35, 35},
		{4: 114, 43: 113, 116},
		{36, 36, 36, 36, 5: 36, 7: 36},
		{28, 28, 28, 28, 5: 67, 45: 125},
		// 65
		{25: 119},
		{4: 122, 30: 121, 120},
		{34, 34, 34, 34, 5: 34},
		{32, 32, 32, 32, 5: 32, 123},
		{30, 30, 30, 30, 5: 30, 30},
		// 70
		{4: 122, 30: 121, 124},
		{31, 31, 31, 31, 5: 31},
		{11, 11, 11, 69, 34: 126},
		{4, 4, 71, 32: 127},
		{45, 45},
		// 75
		{51, 24: 129, 28: 62, 58, 35: 60, 56, 61, 57, 59, 42: 55},
		{50},
	}
)
var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}
type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}
	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}
	return __yyfmt__.Sprintf("%d", c)
}
func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 56
	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack
ret0:
	return 0
ret1:
	return 1
yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate
yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough
		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3
			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}
				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1
		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}
			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}
	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"
	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]
	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}
	switch r {
	case 1:
		{
			setParseTree(yylex, yyS[yypt-0].stmt)
		}
	case 2:
		{
			setParseTree(yylex, yyS[yypt-1].stmt)
		}
	case 3:
		{
			setParseTree(yylex, yyS[yypt-2].stmt)
		}
	case 4:
		{
			yyVAL.stmt = yyS[yypt-0].selStmt
		}
	case 5:
		{
			yyVAL.stmt = yyS[yypt-0].sdbStmt
		}
	case 6:
		{
			yyVAL.stmt = yyS[yypt-0].cdbStmt
		}
	case 7:
		{
			yyVAL.stmt = yyS[yypt-0].smmStmt
		}
	case 8:
		{
			sel := &SelectStatement{}
			sel.Fields = yyS[yypt-5].fields
			//sel.Target = $7
			sel.Sources = yyS[yypt-4].sources
			sel.Dimensions = yyS[yypt-3].dimens
			sel.Condition = yyS[yypt-2].expr
			sel.SortFields = yyS[yypt-1].sortfs
			sel.Limit = yyS[yypt-0].int
			yyVAL.selStmt = sel
		}
	case 9:
		{
			yyVAL.fields = []*Field{yyS[yypt-0].field}
		}
	case 10:
		{
			yyVAL.fields = append(yyS[yypt-0].fields, yyS[yypt-2].field)
		}
	case 11:
		{
			yyVAL.field = &Field{Expr: &Wildcard{Type: yyS[yypt-0].int}}
		}
	case 12:
		{
			yyVAL.field = &Field{Expr: &VarRef{Val: yyS[yypt-0].str}}
		}
	case 13:
		{
			yyVAL.field = &Field{Expr: &VarRef{Val: yyS[yypt-2].str}, Alias: yyS[yypt-0].str}
		}
	case 14:
		{
			yyVAL.sources = yyS[yypt-0].sources
		}
	case 15:
		{
			yyVAL.sources = nil
		}
	case 16:
		{
			yyVAL.sources = []Source{yyS[yypt-0].ment}
		}
	case 17:
		{
			yyVAL.sources = append(yyS[yypt-0].sources, yyS[yypt-2].ment)
		}
	case 18:
		{
			yyVAL.ment = &Measurement{Name: yyS[yypt-0].str}

		}
	case 19:
		{
			yyVAL.dimens = yyS[yypt-0].dimens
		}
	case 20:
		{
			yyVAL.dimens = nil
		}
	case 21:
		{
			yyVAL.dimens = []*Dimension{yyS[yypt-0].dimen}
		}
	case 22:
		{
			yyVAL.dimens = append(yyS[yypt-0].dimens, yyS[yypt-2].dimen)
		}
	case 23:
		{
			yyVAL.dimen = &Dimension{Expr: &VarRef{Val: yyS[yypt-0].str}}

		}
	case 24:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 25:
		{
			yyVAL.expr = nil
		}
	case 26:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 27:
		{
			yyVAL.expr = &BinaryExpr{Op: yyS[yypt-1].int, LHS: yyS[yypt-2].expr, RHS: yyS[yypt-0].expr}
		}
	case 28:
		{
			yyVAL.expr = &BinaryExpr{Op: yyS[yypt-1].int, LHS: yyS[yypt-2].expr, RHS: yyS[yypt-0].expr}

		}
	case 29:
		{
			yyVAL.expr = &BinaryExpr{Op: yyS[yypt-1].int, LHS: yyS[yypt-2].expr, RHS: yyS[yypt-0].expr}
		}
	case 30:
		{
			yyVAL.int = yyS[yypt-0].int
		}
	case 31:
		{
			yyVAL.int = yyS[yypt-0].int
		}
	case 32:
		{
			yyVAL.int = yyS[yypt-0].int
		}
	case 33:
		{
			yyVAL.int = yyS[yypt-0].int
		}
	case 34:
		{
			yyVAL.int = yyS[yypt-0].int
		}
	case 35:
		{
			yyVAL.int = yyS[yypt-0].int
		}
	case 36:
		{
			yyVAL.expr = &VarRef{Val: yyS[yypt-0].str}
		}
	case 37:
		{
			yyVAL.expr = &NumberLiteral{Val: yyS[yypt-0].float64}
		}
	case 38:
		{
			yyVAL.expr = &IntegerLiteral{Val: yyS[yypt-0].int64}
		}
	case 39:
		{
			yyVAL.expr = &DurationLiteral{Val: yyS[yypt-0].tdur}
		}
	case 40:
		{
			yyVAL.expr = &StringLiteral{Val: yyS[yypt-0].str}
		}
	case 41:
		{
			yyVAL.sortfs = yyS[yypt-0].sortfs
		}
	case 42:
		{
			yyVAL.sortfs = nil
		}
	case 43:
		{
			yyVAL.sortfs = []*SortField{yyS[yypt-0].sortf}
		}
	case 44:
		{
			yyVAL.sortfs = append(yyS[yypt-0].sortfs, yyS[yypt-2].sortf)
		}
	case 45:
		{
			yyVAL.sortf = &SortField{Name: yyS[yypt-0].str}
		}
	case 46:
		{
			yyVAL.sortf = &SortField{Name: yyS[yypt-1].str, Ascending: yyS[yypt-0].bool}
		}
	case 47:
		{
			yyVAL.sortf = &SortField{Name: yyS[yypt-1].str, Ascending: yyS[yypt-0].bool}
		}
	case 48:
		{
			yyVAL.int = int(yyS[yypt-0].int64)
		}
	case 49:
		{
			yyVAL.int = 0
		}
	case 50:
		{
			yyVAL.sdbStmt = &ShowDatabasesStatement{}
		}
	case 51:
		{
			yyVAL.cdbStmt = &CreateDatabaseStatement{Name: yyS[yypt-0].str}
		}
	case 52:
		{
			sms := &ShowMeasurementsStatement{}
			sms.Condition = yyS[yypt-2].expr
			sms.SortFields = yyS[yypt-1].sortfs
			sms.Limit = yyS[yypt-0].int
			yyVAL.smmStmt = sms
		}

	}
	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
